import java.awt.*;
import java.util.ArrayList;
import java.util.Stack;
import javax.swing.*;

public class Maze470_multipath
{
	public static final int MWIDTH=30,MHEIGHT=30,BLOCK=20;
	public static boolean robotActive=true;
	public static final int SPEED=50;

	public static final int LEFT=4,RIGHT=8,UP=1,DOWN=2;

	//1=wall above, 2=wall below, 4=wall on left, 8=wall on right, 16=not included in maze yet
	static int[][] maze;
	static MazeComponent mazecomp;

	//current position of robot
	static int robotX=0,robotY=0;

	//true means that a "crumb" is shown in the room
	static boolean[][] crumbs;

	public static void main(String[] args)
	{
		//maze a maze array and a crumb array
		maze=new int[MWIDTH][MHEIGHT];
		crumbs=new boolean[MWIDTH][MHEIGHT];
		//set each room to be surrounded by walls and not part of the maze
		for (int i=0; i<MWIDTH; i++)
			for (int j=0; j<MHEIGHT; j++)
			{
				maze[i][j]=31;
				crumbs[i][j]=false;
			}

		//generate the maze
		makeMaze();

		//knock down up to 100 walls
		for(int i=0; i<100; i++)
		{
			int x=(int)(Math.random()*(MWIDTH-2));
			int y=(int)(Math.random()*MHEIGHT);
			if((maze[x][y]&RIGHT)!=0)
			{
				maze[x][y]^=RIGHT;
				maze[x+1][y]^=LEFT;
			}
		}

		JFrame f = new JFrame();
		f.setSize(MWIDTH*BLOCK+15,MHEIGHT*BLOCK+30);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.setTitle("Maze!");
		mazecomp=new MazeComponent();
		f.add(mazecomp);
		f.setVisible(true);


		//have the robot wander around in its own thread
		if(robotActive)
        {
		    new Thread(new Runnable(){
			    public void run() {
				    //doMazeRandomWalk();
			    	
			    	State test = new State(robotX,robotY);
			    	
			    	test.dfs(robotX, robotY);
			    }
		    }).start();
        }
	}

	public static void makeMaze()
	{
		int[] blockListX = new int[MWIDTH*MHEIGHT];
		int[] blockListY = new int[MWIDTH*MHEIGHT];
		int blocks=0;
		int x,y;

		//Choose random starting block and add it to maze
		x=(int)(Math.random()*(MWIDTH-2)+1);
		y=(int)(Math.random()*(MHEIGHT-2)+1);
		maze[x][y]^=16;

		//Add all adjacent blocks to blocklist
		if (x>0)
		{
			blockListX[blocks]=x-1;
			blockListY[blocks]=y;
			blocks++;
		}
		if (x<MWIDTH-1)
		{
			blockListX[blocks]=x+1;
			blockListY[blocks]=y;
			blocks++;
		}
		if (y>0)
		{
			blockListX[blocks]=x;
			blockListY[blocks]=y-1;
			blocks++;
		}
		if (y<MHEIGHT-1)
		{
			blockListX[blocks]=x;
			blockListY[blocks]=y+1;
			blocks++;
		}

		//approach:
		// start with a single room in maze and all neighbors of the room in the "blocklist"
		// choose a room that is not yet part of the maze but is adjacent to the maze
		// add it to the maze by breaking a wall
		// put all of its neighbors that aren't in the maze into the "blocklist"
		// repeat until everybody is in the maze
		while (blocks>0)
		{
			//choose a random block from blocklist
			int b = (int)(Math.random()*blocks);

			//find which block in the maze it is adjacent to
			//and remove that wall
			x=blockListX[b];
			y=blockListY[b];

			//get a list of all of its neighbors that aren't in the maze
			int[] dir=new int[4];
			int numdir=0;

			//left
			if (x>0 && (maze[x-1][y]&16)==0)
			{
				dir[numdir++]=0;
			}
			//right
			if (x<MWIDTH-1 && (maze[x+1][y]&16)==0)
			{
				dir[numdir++]=1;
			}
			//up
			if (y>0 && (maze[x][y-1]&16)==0)
			{
				dir[numdir++]=2;
			}
			//down
			if (y<MHEIGHT-1 && (maze[x][y+1]&16)==0)
			{
				dir[numdir++]=3;
			}

			//choose one at random
			int d = (int)(Math.random()*numdir);
			d=dir[d];

			//tear down the wall
			//left
			if (d==0)
			{
				maze[x][y]^=LEFT;
				maze[x-1][y]^=RIGHT;
			}
			//right
			else if (d==1)
			{
				maze[x][y]^=RIGHT;
				maze[x+1][y]^=LEFT;
			}
			//up
			else if (d==2)
			{
				maze[x][y]^=UP;
				maze[x][y-1]^=DOWN;
			}
			//down
			else if (d==3)
			{
				maze[x][y]^=DOWN;
				maze[x][y+1]^=UP;
			}

			//set that block as "in the maze"
			maze[x][y]^=16;

			//remove it from the block list
			for (int j=0; j<blocks; j++)
			{
				if ((maze[blockListX[j]][blockListY[j]]&16)==0)
				{
					for (int i=j; i<blocks-1; i++)
					{
						blockListX[i]=blockListX[i+1];
						blockListY[i]=blockListY[i+1];
					}
					blocks--;
					j=0;
				}
			}

			//put all adjacent blocks that aren't in the maze in the block list
			if (x>0 && (maze[x-1][y]&16)>0)
			{
				blockListX[blocks]=x-1;
				blockListY[blocks]=y;
				blocks++;
			}
			if (x<MWIDTH-1 && (maze[x+1][y]&16)>0)
			{
				blockListX[blocks]=x+1;
				blockListY[blocks]=y;
				blocks++;
			}
			if (y>0 && (maze[x][y-1]&16)>0)
			{
				blockListX[blocks]=x;
				blockListY[blocks]=y-1;
				blocks++;
			}
			if (y<MHEIGHT-1 && (maze[x][y+1]&16)>0)
			{
				blockListX[blocks]=x;
				blockListY[blocks]=y+1;
				blocks++;
			}
		}

		//remove top left and bottom right edges
//		maze[0][0]^=LEFT;    //commented out for now so that robot doesn't run out the entrance
		maze[MWIDTH-1][MHEIGHT-1]^=RIGHT;
	}

	//the robot will wander around aimlessly until it happens to stumble on the exit
	

	public static class MazeComponent extends JComponent
	{
		public void paintComponent(Graphics g)
		{
			g.setColor(Color.WHITE);
			g.fillRect(0,0,MWIDTH*BLOCK,MHEIGHT*BLOCK);
			g.setColor(new Color(100,0,0));
			for (int x=0; x<MWIDTH; x++)
			{
				for (int y=0; y<MHEIGHT; y++)
				{
					if ((maze[x][y]&1)>0)
						g.drawLine(x*BLOCK,y*BLOCK,x*BLOCK+BLOCK,y*BLOCK);
					if ((maze[x][y]&2)>0)
						g.drawLine(x*BLOCK,y*BLOCK+BLOCK,x*BLOCK+BLOCK,y*BLOCK+BLOCK);
					if ((maze[x][y]&4)>0)
						g.drawLine(x*BLOCK,y*BLOCK,x*BLOCK,y*BLOCK+BLOCK);
					if ((maze[x][y]&8)>0)
						g.drawLine(x*BLOCK+BLOCK,y*BLOCK,x*BLOCK+BLOCK,y*BLOCK+BLOCK);
				}
			}

			if (robotActive)
			{
				g.setColor(Color.BLUE);
				for (int x=0; x<MWIDTH; x++)
				{
					for (int y=0; y<MHEIGHT; y++)
					{
						if (crumbs[x][y])
							g.fillRect(x*BLOCK+BLOCK/2-1,y*BLOCK+BLOCK/2-1,2,2);
					}
				}

				g.setColor(Color.GREEN);
				g.fillOval(robotX*BLOCK+1,robotY*BLOCK+1,BLOCK-2,BLOCK-2);
			}
		}
	}
	
	static class State
	{
	   State parent;
	   int direction;
	   int x;
	   int y;
      int []moves;

	   
	   public State(int x, int y)
	   {
	      this.parent = null;
	      this.direction = 0;
	      this.x = x;    
	      this.y = y;
	    }
	   
	   public boolean isSolved()
	   {
	      boolean isSolved = false;
	      
	      if (x == (MWIDTH - 1) && y == (MHEIGHT -1))
	      {
	         isSolved = true;
	      }

	      return isSolved;
	   }
	   public boolean canMove(int direction)
	   {
	   	try {
			boolean canMove;
			if((maze[x][y]&direction)==0)
			{
				canMove = true;
			}
			else
			{
				canMove = false;
			}

			return canMove;
		} catch (Exception ignored) {
	   		return false;
		}

	   
	   }
	   public int[] allMoves()
	   {
	      int count = 0;
	      if (canMove(UP)) count++;
	      if (canMove(DOWN)) count++;
	      if (canMove(LEFT)) count++;
	      if (canMove(RIGHT)) count++;
	      int[] moves = new int[count];
	      
	      count=0;
			
	      if(canMove(UP)) moves[count++]=UP;
			if(canMove(DOWN)) moves[count++]=DOWN;
			if(canMove(LEFT)) moves[count++]=LEFT;
			if(canMove(RIGHT)) moves[count++]=RIGHT;
				
			return moves;
	     
	   }
	   
	   public State move(int direction)
	   {
	      State child = new State(x,y); 
	      child.parent=this;
	      child.direction = direction;

			if(direction == UP)
			{
				child.y--;
			}
			if(direction == DOWN)
			{
				child.y++;
			}
			if(direction == RIGHT)
			{
				child.x++;
			}
			if(direction == LEFT)
			{
				child.x--;
			}
			
			return child;
	      
	   }
	   public State[] adjacentStates()
		{
				//go through each valid direction, get the state, make an array of these, return it
				int[] dirs=allMoves();
				//make an array of states, same size
				State[] adj=new State[dirs.length];
				//call move on each valid direction
				for(int i=0; i<dirs.length; i++)
	         {
					adj[i]=move(dirs[i]);
					System.out.println("adjacent dirs are: "  + dirs[i]);
	         }
	        return adj;
		}
	// was having issues with for loop here before so i changed to if statements using a counter.
	   public void doMazeGuidedWalk(ArrayList<Integer> directions)
		{
			int dir = RIGHT;
			int count=0;		
			
			while(robotX!=MWIDTH-1 || robotY!=MHEIGHT-1)
			{
				int x=robotX;
				int y=robotY;

				
				 dir = directions.get(count);
				//move the robot
				if((maze[x][y]&dir)==0)
				{
					if(dir==LEFT) robotX--;
					if(dir==RIGHT) robotX++;
					if(dir==UP) robotY--;
					if(dir==DOWN) robotY++;
				}

				//leave a crumb
				crumbs[x][y]=true;

				//repaint and pause momentarily
				mazecomp.repaint();
				try{ Thread.sleep(SPEED); } catch(Exception e) { }
				
				if(count<=directions.size())
				{
					count++;
				}
				else
				{
					break;
				}
			}
			System.out.println("Done");
		}
      // dfs: this method will create an object of state class, 
      // create a list of states to form a queue and a list of visited nodes
      // it will also create a stack and interate through the queue pop each element
      // check if its solved, and compare adjacentstates (x and y values)
      // once its the path is formed the directions are stored into an ArrayList and sent to DoMazeGuidedWalk
	
	public void dfs(int x, int y)
	   {
	      // create object start 
	      State start = new State(x,y);
	      //have a list of states.  I will add to one size and remove from the other
	        ArrayList<State> queue=new ArrayList<State>();
	        //also have an arraylist of visited states so I don't repeat
	        ArrayList<State> visited=new ArrayList<State>();
	        ArrayList<Integer> MovesList = new ArrayList<>();
	        
	        //create a stack
	        Stack<State> flip = new Stack<State>();
	        //add my start state
	        queue.add(start);

	        int itr=0;
	        State current = null;

	        //keep doing this until either solution or queue is empty (no solution)
	        while(queue.size()>0)
	        {
	            itr++;
	            //pop an element
	            current = queue.remove(queue.size() -1 );
	         	System.out.println("visited: " + current.x + current.y);
	            //check whether it's solved, if so stop
	            if(current.isSolved()) 
               {
                  break; 
               }
				   visited.add(current);
	         	State[] adj=current.adjacentStates();

				for (State neighbor : adj) {
					boolean seen = false;

					for (State visit : visited) {
                  
						System.out.println("X value: " + visit.x);
						System.out.println("Y value: " + visit.y);
						System.out.println("Parent: " + visit.parent);
						System.out.println("Direction: " + visit.direction);
                  System.out.println(neighbor.x);
						System.out.println(neighbor.y);
                  System.out.println(neighbor.direction);
						System.out.println(neighbor.parent);

						if (visit.x == neighbor.x && neighbor.y == visit.y) {
							seen = true;
						}
					}

					if (!seen) {
						System.out.println("not seen"+ neighbor.x+ neighbor.y);
						queue.add(neighbor);
					}
				}
	        }

		   assert current != null;
		   System.out.println(current.x);
	        
	        while(current.parent!=null)    
	        {
	        	MovesList.add(0, current.direction);
	        	current = current.parent;
	   }
	        start.doMazeGuidedWalk(MovesList);
	}
	}
}
